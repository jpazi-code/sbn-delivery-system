import {
  buttonClasses_default
} from "./chunk-2PCKR263.js";
import {
  iconButtonClasses_default
} from "./chunk-TWWIO6RM.js";
import {
  ButtonGroupContext_default
} from "./chunk-2SVI7JPH.js";
import {
  resolveSxValue
} from "./chunk-VBMM7QOS.js";
import {
  useSlot
} from "./chunk-LYLTY4FH.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-P72N46UO.js";
import {
  generateUtilityClass,
  generateUtilityClasses,
  traverseBreakpoints
} from "./chunk-DJQVIRAY.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  clsx_default,
  composeClasses,
  init_clsx,
  init_esm,
  init_extends,
  init_objectWithoutPropertiesLoose,
  isMuiElement,
  require_prop_types
} from "./chunk-J6FGSQXR.js";
import {
  require_jsx_runtime
} from "./chunk-NRBATONI.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@mui/joy/ButtonGroup/ButtonGroup.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
init_clsx();
var import_prop_types = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/ButtonGroup/buttonGroupClasses.js
function getButtonGroupUtilityClass(slot) {
  return generateUtilityClass("MuiButtonGroup", slot);
}
var buttonGroupClasses = generateUtilityClasses("MuiButtonGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var buttonGroupClasses_default = buttonGroupClasses;

// node_modules/@mui/joy/ButtonGroup/ButtonGroup.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["buttonFlex", "className", "component", "disabled", "size", "color", "variant", "children", "orientation", "slots", "slotProps", "spacing"];
var useUtilityClasses = (ownerState) => {
  const {
    size,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getButtonGroupUtilityClass, {});
};
var StyledButtonGroup = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _theme$variants$outli, _theme$variants$outli2, _theme$variants$outli3;
  const {
    borderRadius: radius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius"]);
  const firstChildRadius = ownerState.orientation === "vertical" ? "var(--ButtonGroup-radius) var(--ButtonGroup-radius) var(--unstable_childRadius) var(--unstable_childRadius)" : "var(--ButtonGroup-radius) var(--unstable_childRadius) var(--unstable_childRadius) var(--ButtonGroup-radius)";
  const lastChildRadius = ownerState.orientation === "vertical" ? "var(--unstable_childRadius) var(--unstable_childRadius) var(--ButtonGroup-radius) var(--ButtonGroup-radius)" : "var(--unstable_childRadius) var(--ButtonGroup-radius) var(--ButtonGroup-radius) var(--unstable_childRadius)";
  const margin = ownerState.orientation === "vertical" ? "calc(var(--ButtonGroup-separatorSize) * -1) 0 0 0" : "0 0 0 calc(var(--ButtonGroup-separatorSize) * -1)";
  const styles = {};
  traverseBreakpoints(theme.breakpoints, ownerState.spacing, (appendStyle, value) => {
    if (value !== null) {
      var _theme$spacing;
      appendStyle(styles, {
        // the buttons should be connected if the value is more than 0
        "--ButtonGroup-connected": value.toString().match(/^0(?!\.)/) ? "1" : "0",
        gap: typeof value === "string" ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
      });
    }
  });
  const outlinedStyle = (_theme$variants$outli = theme.variants.outlined) == null ? void 0 : _theme$variants$outli[ownerState.color];
  const outlinedDisabledStyle = (_theme$variants$outli2 = theme.variants.outlinedDisabled) == null ? void 0 : _theme$variants$outli2[ownerState.color];
  const outlinedHoverStyle = (_theme$variants$outli3 = theme.variants.outlinedHover) == null ? void 0 : _theme$variants$outli3[ownerState.color];
  return [_extends({
    "--ButtonGroup-separatorSize": ownerState.variant === "outlined" ? "1px" : "calc(var(--ButtonGroup-connected) * 1px)",
    "--ButtonGroup-separatorColor": outlinedStyle == null ? void 0 : outlinedStyle.borderColor,
    "--ButtonGroup-radius": theme.vars.radius.sm,
    "--Divider-inset": "0.5rem",
    "--unstable_childRadius": "calc((1 - var(--ButtonGroup-connected)) * var(--ButtonGroup-radius) - var(--variant-borderWidth, 0px))"
  }, styles, {
    display: "flex",
    borderRadius: "var(--ButtonGroup-radius)",
    flexDirection: ownerState.orientation === "vertical" ? "column" : "row",
    // first Button or IconButton
    [`& > [data-first-child]`]: _extends({
      "--Button-radius": firstChildRadius,
      "--IconButton-radius": firstChildRadius
    }, ownerState.orientation === "horizontal" && {
      borderRight: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }, ownerState.orientation === "vertical" && {
      borderBottom: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }),
    // middle Buttons or IconButtons
    [`& > :not([data-first-child]):not([data-last-child]):not(:only-child)`]: _extends({
      "--Button-radius": "var(--unstable_childRadius)",
      "--IconButton-radius": "var(--unstable_childRadius)",
      borderRadius: "var(--unstable_childRadius)"
    }, ownerState.orientation === "horizontal" && {
      borderLeft: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)",
      borderRight: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }, ownerState.orientation === "vertical" && {
      borderTop: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)",
      borderBottom: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }),
    // last Button or IconButton
    [`& > [data-last-child]`]: _extends({
      "--Button-radius": lastChildRadius,
      "--IconButton-radius": lastChildRadius
    }, ownerState.orientation === "horizontal" && {
      borderLeft: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }, ownerState.orientation === "vertical" && {
      borderTop: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }),
    // single Button or IconButton
    [`& > :only-child`]: {
      "--Button-radius": "var(--ButtonGroup-radius)",
      "--IconButton-radius": "var(--ButtonGroup-radius)"
    },
    [`& > :not([data-first-child]):not(:only-child)`]: {
      "--Button-margin": margin,
      "--IconButton-margin": margin
    },
    [`& .${buttonClasses_default.root}, & .${iconButtonClasses_default.root}`]: _extends({
      "&:not(:disabled)": {
        zIndex: 1
        // to make borders appear above disabled buttons.
      },
      "&:disabled": {
        "--ButtonGroup-separatorColor": outlinedDisabledStyle == null ? void 0 : outlinedDisabledStyle.borderColor
      }
    }, ownerState.variant === "outlined" && {
      "&:hover": {
        "--ButtonGroup-separatorColor": outlinedHoverStyle == null ? void 0 : outlinedHoverStyle.borderColor
      }
    }, {
      [`&:hover, ${theme.focus.selector}`]: {
        zIndex: 2
        // to make borders appear above sibling.
      }
    })
  }, ownerState.buttonFlex && {
    [`& > *:not(.${iconButtonClasses_default.root})`]: {
      flex: ownerState.buttonFlex
    },
    [`& > :not(button) > .${buttonClasses_default.root}`]: {
      width: "100%"
      // for button to fill its wrapper.
    }
  }), radius !== void 0 && {
    "--ButtonGroup-radius": radius
  }];
});
var ButtonGroupRoot = styled_default(StyledButtonGroup, {
  name: "JoyButtonGroup",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var ButtonGroup = React.forwardRef(function ButtonGroup2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyButtonGroup"
  });
  const {
    buttonFlex,
    className,
    component = "div",
    disabled = false,
    size = "md",
    color = "neutral",
    variant = "outlined",
    children,
    orientation = "horizontal",
    slots = {},
    slotProps = {},
    spacing = 0
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends({}, props, {
    buttonFlex,
    color,
    component,
    orientation,
    spacing,
    size,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ButtonGroupRoot,
    externalForwardedProps,
    additionalProps: {
      role: "group"
    },
    ownerState
  });
  const buttonGroupContext = React.useMemo(() => ({
    variant,
    color,
    size,
    disabled
  }), [variant, color, size, disabled]);
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime.jsx)(ButtonGroupContext_default.Provider, {
      value: buttonGroupContext,
      children: React.Children.map(children, (child, index) => {
        if (!React.isValidElement(child)) {
          return child;
        }
        const extraProps = {};
        if (isMuiElement(child, ["Divider"])) {
          var _childProps$inset, _childProps$orientati;
          const childProps = child.props;
          extraProps.inset = (_childProps$inset = childProps == null ? void 0 : childProps.inset) != null ? _childProps$inset : "context";
          const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
          extraProps.orientation = (_childProps$orientati = childProps == null ? void 0 : childProps.orientation) != null ? _childProps$orientati : dividerOrientation;
          extraProps.role = "presentation";
          extraProps.component = "span";
        }
        if (React.Children.count(children) > 1) {
          if (index === 0) {
            extraProps["data-first-child"] = "";
          }
          if (index === React.Children.count(children) - 1) {
            extraProps["data-last-child"] = "";
          }
        }
        return React.cloneElement(child, extraProps);
      })
    })
  }));
});
true ? ButtonGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The flex value of the button.
   * @example buttonFlex={1} will set flex: '1 1 auto' on each button (stretch the button to equally fill the available space).
   */
  buttonFlex: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * Used to render icon or text elements inside the ButtonGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, all the buttons will be disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["lg", "md", "sm"]), import_prop_types.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string])), import_prop_types.default.number, import_prop_types.default.shape({
    lg: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    md: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    sm: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    xl: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    xs: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string])
  }), import_prop_types.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var ButtonGroup_default = ButtonGroup;

export {
  getButtonGroupUtilityClass,
  buttonGroupClasses_default,
  StyledButtonGroup,
  ButtonGroup_default
};
//# sourceMappingURL=chunk-QAFNOQVO.js.map
